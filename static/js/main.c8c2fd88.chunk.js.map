{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","serviceWorker.js","index.js"],"names":["module","exports","Metronome","props","startStop","state","playing","clearInterval","timer","setState","setInterval","playClick","bpm","count","beatsPerMeasure","click2","play","click1","handleBpmChange","event","target","value","changeMeasure","Audio","this","className","type","min","max","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,+NCkH5BC,E,kDA3GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,UAAY,WACJ,EAAKC,MAAMC,SACXC,cAAc,EAAKC,OACnB,EAAKC,SAAS,CAAEH,SAAS,MAGzB,EAAKE,MAAQE,YACT,EAAKC,UACJ,GAAK,EAAKN,MAAMO,IAAO,KAE5B,EAAKH,SAAS,CACVH,SAAS,EACTO,MAAO,GAEP,EAAKF,aA5BE,EAiCnBA,UAAY,WAAO,IAAD,EACqB,EAAKN,MAD1B,EACNQ,MADM,EACCC,kBAEiB,EAC5B,EAAKC,OAAOC,OAEZ,EAAKC,OAAOD,OAGhB,EAAKP,UAAS,SAAAJ,GAAK,MAAK,CACpBQ,OAAQR,EAAMQ,MAAQ,GAAKR,EAAMS,qBA3CtB,EA+CnBI,gBAAkB,SAAAC,GACd,IAAMP,EAAMO,EAAMC,OAAOC,MACrB,EAAKhB,MAAMC,SACXC,cAAc,EAAKC,OACnB,EAAKA,MAAQE,YAAY,EAAKC,UAAY,GAAKC,EAAO,KAEtD,EAAKH,SAAS,CACVI,MAAO,EACPD,SAIJ,EAAKH,SAAS,CAAEG,SA3DL,EA+DnBU,cAAgB,SAAAH,GACZ,IAAML,EAAkBK,EAAMC,OAAOC,MACrC,EAAKZ,SAAS,CAAEK,qBA9DhB,EAAKT,MAAQ,CACTC,SAAS,EACTO,MAAO,EACPD,IAAK,IACLE,gBAAiB,GAErB,EAAKG,OAAS,IAAIM,MAAMN,KACxB,EAAKF,OAAS,IAAIQ,MAAMR,KAVT,E,qDAoET,IAAD,EACoBS,KAAKnB,MAAtBC,EADH,EACGA,QAASM,EADZ,EACYA,IAEjB,OACI,yBAAKa,UAAU,aACX,6BAEI,yBAAKA,UAAU,SAAf,aACA,yBAAKA,UAAU,cACX,6BAAMb,EAAN,QACA,2BACIc,KAAK,QACLC,IAAI,KACJC,IAAI,MACJP,MAAOT,EACPiB,SAAUL,KAAKN,mBAGvB,4BAAQY,QAASN,KAAKpB,WAAYE,EAAU,OAAS,SAErD,4BACImB,UAAU,cACVJ,MAAOG,KAAKnB,MAAMS,gBAClBe,SAAUL,KAAKF,eACf,4BAAQD,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,Y,GAnGAU,aCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c8c2fd88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './click1.wav'\nimport click2 from './click2.wav'\n\nclass Metronome extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            playing: false,\n            count: 0,\n            bpm: 120,\n            beatsPerMeasure: 4\n        }\n        this.click1 = new Audio(click1);\n        this.click2 = new Audio(click2);\n\n    }\n\n    startStop = () => {\n        if (this.state.playing) {\n            clearInterval(this.timer);\n            this.setState({ playing: false });\n        }\n        else {\n            this.timer = setInterval(\n                this.playClick,\n                (60 / this.state.bpm) * 1000\n            );\n            this.setState({\n                playing: true,\n                count: 0,\n            },\n                this.playClick\n            );\n        }\n    }\n\n    playClick = () => {\n        const { count, beatsPerMeasure } = this.state;\n\n        if (count % beatsPerMeasure === 0) {\n            this.click2.play();\n        } else {\n            this.click1.play();\n        }\n\n        this.setState(state => ({\n            count: (state.count + 1) % state.beatsPerMeasure\n        }));\n    }\n\n    handleBpmChange = event => {\n        const bpm = event.target.value;\n        if (this.state.playing) {\n            clearInterval(this.timer);\n            this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n\n            this.setState({\n                count: 0,\n                bpm\n            })\n        }\n        else {\n            this.setState({ bpm });\n        }\n    }\n\n    changeMeasure = event => {\n        const beatsPerMeasure = event.target.value\n        this.setState({ beatsPerMeasure })\n    }\n\n    render() {\n        const { playing, bpm } = this.state;\n\n        return (\n            <div className=\"metronome\">\n                <div>\n\n                    <div className=\"title\">Metronome</div>\n                    <div className=\"bpm-slider\">\n                        <div>{bpm} BPM</div>\n                        <input\n                            type=\"range\"\n                            min=\"50\"\n                            max=\"300\"\n                            value={bpm}\n                            onChange={this.handleBpmChange} />\n                    </div>\n\n                    <button onClick={this.startStop}>{playing ? 'Stop' : 'Start'}</button>\n\n                    <select\n                        className=\"select-beat\"\n                        value={this.state.beatsPerMeasure}\n                        onChange={this.changeMeasure}>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option>\n                        <option value=\"7\">7</option>\n                    </select>\n                </div>\n\n\n            </div>\n        )\n    }\n}\n\nexport default Metronome;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './Metronome';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Metronome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}